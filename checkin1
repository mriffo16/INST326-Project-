import tkinter as tk
from tkinter import messagebox, simpledialog
import random
import unittest

class JeopardyGame:
    def __init__(self, master):
        """ 
         Initializes the Jeopardy game holds the questions that will be asked along with making the dictionary for the correct answers
         Initializes the user and fake players score to 0
         """
        self.master = master
        self.master.title("Python Jeopardy")
        self.categories = ["Python", "Movies", "TV Shows", "Music"]
        self.questions = {
            "Python": {100: "What is a dictionary in Python?",
                       200: "What is a tuple in Python?",
                       300: "What is a list in Python?"},
            "Movies": {100: "If you watch the Marvel movies in chronological order, which movie would you start with?",
                       200: "What was the first feature-length animated movie ever released?",
                       300: "What is the first animated movie made entirely by CGI (computer-generated imagery)?"},
            "TV Shows": {100: "What is the highest-rated television show on IMDB?",
                         200: "Spongebob Squarepants was originally going to be named what?",
                         300: "What is the longest-running game show of all time?"},
            "Music": {100: "Who performed at the Super Bowl halftime show in 2021?",
                      200: "What country is Rihanna from?",
                      300: "Before becoming a solo artist, Beyoncé was part of Destiny’s Child group. Name the two other members."}
        }
        self.answers = {
            "Python": {100: "Data structure",
                       200: "Immutable",
                       300: "Mutable"},
            "Movies": {100: "Captain America: The First Avenger",
                       200: "Snow White and the Seven Dwarfs",
                       300: "Toy Story"},
            "TV Shows": {100: "Breaking Bad",
                         200: "El Apóstol",
                         300: "The Price Is Right"},
            "Music": {100: "The Weeknd",
                      200: "Barbados",
                      300: "Kelly Rowland and Michelle Williams"}
        }
        self.current_player = "User"
        self.fake_player = "Computer"
        self.fake_player_points = 0
        self.user_points = 0
        self.create_widgets()
        self.update_board()

    def create_widgets(self):
        """
        Creates the necessary widgets for the game interface.
        """
        self.label = tk.Label(self.master, text="Choose a question:")
        self.label.grid(row=0, column=0, columnspan=2, pady=10)

        self.category_var = tk.StringVar(self.master)
        self.category_var.set(self.categories[0])
        self.category_menu = tk.OptionMenu(self.master, self.category_var, *self.categories)
        self.category_menu.grid(row=1, column=0)

        self.question_var = tk.StringVar(self.master)
        self.question_menu = tk.OptionMenu(self.master, self.question_var, "")
        self.question_menu.grid(row=1, column=1)

        self.pick_button = tk.Button(self.master, text="Pick", command=self.pick_question)
        self.pick_button.grid(row=2, column=0, columnspan=2, pady=10)

        self.user_points_label = tk.Label(self.master, text="User Points: 0")
        self.user_points_label.grid(row=3, column=0, columnspan=2)

        self.fake_player_points_label = tk.Label(self.master, text="CPU Player Points: 0")
        self.fake_player_points_label.grid(row=4, column=0, columnspan=2)

    def update_board(self):
        """
        Updates the game board based on the current state of the game.
        """
        self.question_menu['menu'].delete(0, 'end')
        questions = self.questions[self.category_var.get()]
        for question in questions:
            self.question_menu['menu'].add_command(label=str(question), command=tk._setit(self.question_var, question))

    def pick_question(self):
        """
        Handles the event when a question is picked from the game board.
        """
        category = self.category_var.get()
        question_amount = int(self.question_var.get())
        question = self.questions[category][question_amount]
        answer = self.answers[category][question_amount]
        messagebox.showinfo("Question", question)

        # Simulate fake player's turn
        fake_player_decision = random.randint(1, 2)
        if fake_player_decision == 1:
            self.fake_player_points += question_amount
            self.fake_player_points_label.config(text=f"Fake Player Points: {self.fake_player_points}")
            messagebox.showinfo("Fake Player", f"{self.fake_player} got the answer right and earned {question_amount} points!")

        # Prompt user for answer
        user_answer = messagebox.askyesno("Your Turn", "Do you want to answer the question?")
        if user_answer:
            user_response = simpledialog.askstring("Your Answer", "Enter your answer:")
            if user_response and user_response.lower() == answer.lower():
                self.user_points += question_amount
                self.user_points_label.config(text=f"User Points: {self.user_points}")
                messagebox.showinfo("Correct", f"Correct! You earned {question_amount} points!")
            else:
                messagebox.showinfo("Incorrect", f"Sorry, the correct answer is: {answer}")

        self.current_player = "User"  # Reset current player to user for the next turn
        self.update_board()

root = tk.Tk()
app = JeopardyGame(root)
root.mainloop()
